import { BeforeInsert, Column, Entity, JoinColumn, ManyToOne, OneToMany } from 'typeorm';
import { v4 as uuidV4 } from 'uuid';

import { BingoParticipant } from '@/bingo/participant/bingo-participant.entity';
import { StrongEntityParanoid } from '@/db/base.entity';
import { User } from '@/user/user.entity';

import { BingoStatus } from './bingo-status.enum';
import { BingoTile } from './tile/bingo-tile.entity';

@Entity()
export class Bingo extends StrongEntityParanoid {
  @Column({ type: 'uuid', nullable: false, unique: true })
  /** This column is generated by the app, not by SQL because we need this ID
      before saving the entity when seeding bingos. */
  bingoId: string;

  @BeforeInsert()
  generateIdIfMissing() {
    if (!this.bingoId) {
      this.bingoId = uuidV4();
    }
  }

  @Column({ default: 'en' })
  language: string;

  @Column()
  title: string;

  @Column()
  description: string;

  @Column()
  private: boolean;

  @Column({ default: 5 })
  width: number;

  @Column({ default: 5 })
  height: number;

  @Column()
  fullLineValue: number;

  @Column({ type: 'date' })
  startDate: string;

  @Column({ type: 'date' })
  endDate: string;

  @ManyToOne(() => User)
  @JoinColumn({ name: 'created_by' })
  createdBy: Promise<User>;

  @ManyToOne(() => User)
  @JoinColumn({ name: 'updated_by' })
  updatedBy: Promise<User>;

  @Column({ nullable: true, type: 'timestamptz' })
  startedAt: Date | null;

  @Column({ name: 'started_by', type: 'int', nullable: true })
  startedById: number | null = null;

  @ManyToOne(() => User, { nullable: true })
  @JoinColumn({ name: 'started_by' })
  startedBy: Promise<User | null>;

  @Column({ nullable: true, type: 'timestamptz' })
  endedAt: Date | null;

  @Column({ name: 'ended_by', type: 'int', nullable: true })
  endedById: number | null = null;

  @ManyToOne(() => User)
  @JoinColumn({ name: 'ended_by' })
  endedBy: Promise<User | null>;

  @Column({ nullable: true, type: 'timestamptz' })
  canceledAt: Date | null;

  @Column({ name: 'canceled_by', type: 'int', nullable: true })
  canceledById: number | null = null;

  @ManyToOne(() => User)
  @JoinColumn({ name: 'canceled_by' })
  canceledBy: Promise<User | null>;

  @ManyToOne(() => User)
  @JoinColumn({ name: 'deleted_by' })
  deletedBy: Promise<User | null>;

  @Column({ nullable: true, type: 'timestamptz' })
  resetAt: Date | null;

  @Column({ name: 'reset_by', type: 'int', nullable: true })
  resetById: number | null = null;

  @ManyToOne(() => User)
  @JoinColumn({ name: 'reset_by' })
  resetBy: Promise<User | null>;

  @Column({ type: 'date', nullable: true })
  maxRegistrationDate?: string;

  @OneToMany(() => BingoParticipant, (bingoParticipant) => bingoParticipant.bingo)
  participants: Promise<BingoParticipant[]>;

  @OneToMany(() => BingoTile, (bingoTile) => bingoTile.bingo)
  tiles: Promise<BingoTile[]>;

  public get status() {
    const now = new Date();
    if (this.canceledAt && this.canceledAt < now) return BingoStatus.Canceled;
    if (this.endedAt && this.endedAt < now) return BingoStatus.Completed;
    if (this.startedAt && this.startedAt < now) return BingoStatus.Ongoing;

    return BingoStatus.Pending;
  }
}
